// Define inputs from application.
struct VertexIn
{
  float4 position : POSITION;       // Vertex in object-space
  float2 texCoords  : TEXCOORD0;    // Vertex's Texture Coordinates
};
 
// Define outputs from vertex shader.
struct Vertex
{
  float4 position   : POSITION;     // Vertex position in screen-space
  float4 color      : COLOR;        // Vertex color
  float2 texCoords  : TEXCOORD0;    // Vertex Texture Coordinates
  float depth       : TEXCOORD1;    // Vertex depth in eye space
};
 
Vertex main(VertexIn p_In,
            uniform float4 p_AmbientLight,          // Ambient light in scene
            uniform float4x4 p_ModelViewProjection  // Model view projection matrix
           )
{
    Vertex l_Out;
 
    // Transform vertex position into homogenous screen-space.
    l_Out.position = mul(p_ModelViewProjection, p_In.position);
 
    // Store depth
    l_Out.depth = l_Out.position.z;
 
    // Store ambient color
    l_Out.color = p_AmbientLight;
 
    // Pass texture coordinates to fragment shader
    l_Out.texCoords = p_In.texCoords;
 
    return l_Out;
}

struct Vertex
{
  float4 position   : POSITION;     // Fragment position in screen-space
  float4 color      : COLOR;        // Fragment color
  float2 texCoords  : TEXCOORD0;    // Fragment's Texture Coordinates
  float depth       : TEXCOORD1;    // Fragment depth in eye-space
};
 
struct Fragment
{
    float4 color  : COLOR0;
};
 
Fragment main(Vertex p_In
 
            #ifdef STORE_NORMALIZED_DEPTH
              ,uniform float p_Near // Near distance
              ,uniform float p_Far  // Far distance
            #endif
 
              ,uniform float p_DepthOffset  // Depth offset
              )
{
    Fragment l_Out;
 
#ifdef STORE_NORMALIZED_DEPTH
 
    // Store normalized depth in [0,1] to avoid overflowing,
    // even when using half precision floating point render target
    float l_Depth = (1.0/p_Near - 1.0/p_In.depth) / (1.0/p_Near - 1.0/p_Far);
 
    // Use some bias to avoid precision issue
    // TODO : As depth is not distributed uniformly across the range
    // we should bias proportionately to the depth value itself.
    // The absolute bias closer to the camera is lower than the bias further away.
    l_Depth += p_DepthOffset;
 
#else
 
    // Store non-normalized depth
    float l_Depth = p_In.depth;
 
    // Use some bias to avoid precision issue
    l_Depth += p_DepthOffset;
 
#endif
 
    // Write the depth value to the depth map
    l_Out.color.r = l_Depth;
 
    return l_Out;
}
